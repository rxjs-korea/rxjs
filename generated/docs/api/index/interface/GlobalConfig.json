{
  "id": "api/index/interface/GlobalConfig",
  "title": "GlobalConfig",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/config.ts?message=docs(index)%3A%20describe%20your%20change...#L15-L84\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.7/src/internal/config.ts#L15-L84\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/interface/GlobalConfig\", \"name\": \"GlobalConfig\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"globalconfig\">GlobalConfig<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/interface/GlobalConfig#globalconfig\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label interface\">interface</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p>The global configuration object for RxJS, used to configure things\nlike how to react on unhandled errors. Accessible via <a href=\"api/index/const/config\"><code>config</code></a>\nobject.</p>\n<p></p>\n  \n  \n  <section class=\"interface-overview\">\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface <a href=\"api/index/interface/GlobalConfig\" class=\"code-anchor\">GlobalConfig</a> {\n  <a class=\"code-anchor\" href=\"api/index/interface/GlobalConfig#onUnhandledError\">onUnhandledError: ((err: any) => void) | null</a>\n  <a class=\"code-anchor\" href=\"api/index/interface/GlobalConfig#onStoppedNotification\">onStoppedNotification: ((notification: ObservableNotification&#x3C;any>, subscriber: Subscriber&#x3C;any>) => void) | null</a>\n  <a class=\"code-anchor deprecated-api-item\" href=\"api/index/interface/GlobalConfig#Promise\">Promise?: PromiseConstructorLike</a>\n  <a class=\"code-anchor deprecated-api-item\" href=\"api/index/interface/GlobalConfig#useDeprecatedSynchronousErrorHandling\">useDeprecatedSynchronousErrorHandling: boolean</a>\n  <a class=\"code-anchor deprecated-api-item\" href=\"api/index/interface/GlobalConfig#useDeprecatedNextContext\">useDeprecatedNextContext: boolean</a>\n}\n</code-example>\n\n  \n  \n\n\n  \n  \n\n</section>\n  \n  \n  \n<section class=\"instance-properties\">\n  <h2 id=\"properties\">Properties<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/interface/GlobalConfig#properties\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table properties-table\">\n    <thead>\n      <tr><th>Property</th><th>Type</th><th>Description</th></tr>\n    </thead>\n    <tbody>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"onUnhandledError\"></a><code class=\"\">onUnhandledError</code></td>\n        <td><label class=\"property-type-label\"><code>((err: any) => void) | null</code></label></td>\n        <td>\n          <p>A registration point for unhandled errors from RxJS. These are errors that\ncannot were not handled by consuming code in the usual subscription path. For\nexample, if you have this configured, and you subscribe to an observable without\nproviding an error handler, errors from that subscription will end up here. This\nwill <em>always</em> be called asynchronously on another job in the runtime. This is because\nwe do not want errors thrown in this user-configured handler to interfere with the\nbehavior of the library.</p>\n\n          \n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"onStoppedNotification\"></a><code class=\"\">onStoppedNotification</code></td>\n        <td><label class=\"property-type-label\"><code>((notification: <a href=\"api/index/type-alias/ObservableNotification\" class=\"code-anchor\">ObservableNotification</a>&#x3C;any>, subscriber: <a href=\"api/index/class/Subscriber\" class=\"code-anchor\">Subscriber</a>&#x3C;any>) => void) | null</code></label></td>\n        <td>\n          <p>A registration point for notifications that cannot be sent to subscribers because they\nhave completed, errored or have been explicitly unsubscribed. By default, next, complete\nand error notifications sent to stopped subscribers are noops. However, sometimes callers\nmight want a different behavior. For example, with sources that attempt to report errors\nto stopped subscribers, a caller can configure RxJS to throw an unhandled error instead.\nThis will <em>always</em> be called asynchronously on another job in the runtime. This is because\nwe do not want errors thrown in this user-configured handler to interfere with the\nbehavior of the library.</p>\n\n          \n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"Promise\"></a><code class=\"deprecated-api-item\">Promise</code></td>\n        <td><label class=\"property-type-label\"><code>PromiseConstructorLike</code></label></td>\n        <td>\n          <p>The promise constructor used by default for <a href=\"api/index/class/Observable#toPromise\">toPromise</a> and <a href=\"api/index/class/Observable#forEach\">forEach</a>\nmethods.</p>\n\n          \n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"useDeprecatedSynchronousErrorHandling\"></a><code class=\"deprecated-api-item\">useDeprecatedSynchronousErrorHandling</code></td>\n        <td><label class=\"property-type-label\"><code>boolean</code></label></td>\n        <td>\n          <p>If true, turns on synchronous error rethrowing, which is a deprecated behavior\nin v6 and higher. This behavior enables bad patterns like wrapping a subscribe\ncall in a try/catch block. It also enables producer interference, a nasty bug\nwhere a multicast can be broken for all observers by a downstream consumer with\nan unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BUY TIME\nFOR MIGRATION REASONS.</p>\n\n          \n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"useDeprecatedNextContext\"></a><code class=\"deprecated-api-item\">useDeprecatedNextContext</code></td>\n        <td><label class=\"property-type-label\"><code>boolean</code></label></td>\n        <td>\n          <p>If true, enables an as-of-yet undocumented feature from v5: The ability to access\n<code>unsubscribe()</code> via <code>this</code> context in <code>next</code> functions created in observers passed\nto <code>subscribe</code>.</p>\n\n          <p>This is being removed because the performance was severely problematic, and it could also cause\nissues when types other than POJOs are passed to subscribe as subscribers, as they will likely have\ntheir <code>this</code> context overwritten.</p>\n\n          \n        </td>\n    </tr>\n    \n    </tbody>\n  </table>\n</section>\n  \n\n\n  \n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index\n - api/index/class/Observable\n - api/index/const/config\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Observable#forEach\n - api/index/class/Observable#toPromise\n - api/index/class/Subscriber\n - api/index/const/config\n - api/index/interface/GlobalConfig#Promise\n - api/index/interface/GlobalConfig#globalconfig\n - api/index/interface/GlobalConfig#onStoppedNotification\n - api/index/interface/GlobalConfig#onUnhandledError\n - api/index/interface/GlobalConfig#properties\n - api/index/interface/GlobalConfig#useDeprecatedNextContext\n - api/index/interface/GlobalConfig#useDeprecatedSynchronousErrorHandling\n - api/index/type-alias/ObservableNotification\n - https://github.com/reactivex/rxjs/edit/master/src/internal/config.ts?message=docs(index)%3A%20describe%20your%20change...#L15-L84\n - https://github.com/reactivex/rxjs/tree/7.5.7/src/internal/config.ts#L15-L84\n-->"
}