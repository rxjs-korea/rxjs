{
  "id": "guide/overview",
  "title": "소개",
  "contents": "\n<div class=\"content\">\n<h1 id=\"소개\">소개<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/overview#소개\"><i class=\"material-icons\">link</i></a></h1>\n<p>RxJS는 observable sequence를 사용하여 비동기 및 event 기반 프로그램을 제작하기 위한 라이브러리입니다. 핵심 유형 중 하나인 <a href=\"./guide/observable\">Observable</a>, satellite types (Observer, Schedulers, Subjects), <code>Array</code> 메서드 (<code><a href=\"api/index/function/map\" class=\"code-anchor\">map</a></code>, <code><a href=\"api/index/function/filter\" class=\"code-anchor\">filter</a></code>, <code><a href=\"api/index/function/reduce\" class=\"code-anchor\">reduce</a></code>, <code><a href=\"api/index/function/every\" class=\"code-anchor\">every</a></code> 등) 에 의해 영감을 받아 비동기 event를 collection로 처리할 수 있게 합니다.</p>\n<p><span class=\"informal\">RxJS를 이벤트용 Lodash 처럼 생각하세요.</span></p>\n<p>ReactiveX는 <a href=\"https://en.wikipedia.org/wiki/Observer_pattern\">Observer 패턴</a>과 <a href=\"https://en.wikipedia.org/wiki/Iterator_pattern\">Iterator 패턴</a>과 <a href=\"http://martinfowler.com/articles/collection-pipeline/#NestedOperatorExpressions\">컬렉션을 이용한 함수형 프로그래밍</a>을 결합하여 event sequence를 관리하기 위한 아이디어를 제공합니다.</p>\n<p>비동기 event 관리를 위한 RxJS의 본질적인 개념:</p>\n<ul>\n<li><strong>Observable:</strong>  변경될 수 있는 value나 이벤트를 다루는 collection.</li>\n<li><strong>Observer:</strong> Observable에서 전달하는 value를 처리하는 callback collection.</li>\n<li><strong>Subscription:</strong> Observable의 실행. 주로 실행을 취소하는데 유용하다.</li>\n<li><strong>Operators:</strong> <code><a href=\"api/index/function/map\" class=\"code-anchor\">map</a></code>, <code><a href=\"api/index/function/filter\" class=\"code-anchor\">filter</a></code>, <code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code>, <code><a href=\"api/index/function/reduce\" class=\"code-anchor\">reduce</a></code> 등의 함수형 프로그래밍 표현을 가능하게 해주는 순수 함수.</li>\n<li><strong>Subject:</strong> EventEmitter와 동등하다. value나 event를 다수의 Observer로 멀티캐스팅 할 수 있는 유일한 방법.</li>\n<li><strong>Schedulers:</strong> 동시성을 제어하는 중앙집중식 dispatcher. <code>setTimeout</code>이나 <code>requestAnimationFrame</code>등의 연산이 일어날 때 작동함.</li>\n</ul>\n<h2 id=\"예시\">예시<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/overview#예시\"><i class=\"material-icons\">link</i></a></h2>\n<p>일반적으로 event listener를 등록하는 코드:</p>\n<code-example language=\"ts\">\ndocument.addEventListener('click', () => console.log('Clicked!'));\n</code-example>\n<p>RxJS를 이용해 observable을 만드는 코드:</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a> } from 'rxjs';\n\n<a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click').subscribe(() => console.log('Clicked!'));\n</code-example>\n<h3 id=\"purity\">Purity<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/overview#purity\"><i class=\"material-icons\">link</i></a></h3>\n<p>RxJS를 강력하게 만드는 것은 순수한 함수를 사용하여 value를 생성하는 기능입니다. 코드에서 에러가 덜 발생합니다.</p>\n<p>일반적으로, state를 엉망으로 만드는 불순한 함수:</p>\n<code-example language=\"ts\">\nlet <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> = 0;\ndocument.addEventListener('click', () => console.log(`Clicked ${++<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>} times`));\n</code-example>\n<p>RxJS를 이용해 state를 격리하는 코드:</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a> } from 'rxjs';\n\n<a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click')\n  .pipe(<a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a>((<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>) => <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> + 1, 0))\n  .subscribe((<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>) => console.log(`Clicked ${<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>} times`));\n</code-example>\n<p><strong>scan</strong>은 배열의 <strong>reduce</strong>와 동일하게 작동합니다. callback에는 시작 value가 필요하고, callback이 리턴한 value는 다음 callback의 value가 됩니다.</p>\n<h3 id=\"flow\">Flow<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/overview#flow\"><i class=\"material-icons\">link</i></a></h3>\n<p>RxJS에는 event가 observable에 의해 제어되도록 도와주는 전역 operator가 있습니다.</p>\n<p>순수 JavaScript를 이용하여 초당 한 번만 클릭을 허용하는 코드:</p>\n<code-example language=\"ts\">\nlet <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> = 0;\nlet rate = 1000;\nlet lastClick = Date.now() - rate;\ndocument.addEventListener('click', () => {\n  if (Date.now() - lastClick >= rate) {\n    console.log(`Clicked ${++<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>} times`);\n    lastClick = Date.now();\n  }\n});\n</code-example>\n<p>RxJS 이용한 코드:</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/throttleTime\" class=\"code-anchor\">throttleTime</a>, <a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a> } from 'rxjs';\n\n<a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click')\n  .pipe(\n    <a href=\"api/index/function/throttleTime\" class=\"code-anchor\">throttleTime</a>(1000),\n    <a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a>((<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>) => <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> + 1, 0)\n  )\n  .subscribe((<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>) => console.log(`Clicked ${<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>} times`));\n</code-example>\n<p>다른 흐름 제어 operator는 <a href=\"../api/operators/filter\"><strong>filter</strong></a>, <a href=\"../api/operators/delay\"><strong>delay</strong></a>, <a href=\"../api/operators/debounceTime\"><strong>debounceTime</strong></a>, <a href=\"../api/operators/take\"><strong>take</strong></a>, <a href=\"../api/operators/takeUntil\"><strong>takeUntil</strong></a>, <a href=\"../api/operators/distinct\"><strong>distinct</strong></a>, <a href=\"../api/operators/distinctUntilChanged\"><strong>distinctUntilChanged</strong></a> 등이 있습니다.</p>\n<h3 id=\"values\">Values<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/overview#values\"><i class=\"material-icons\">link</i></a></h3>\n<p>observable을 이용해 value를 변경할 수 있습니다.</p>\n<p>순수 JavaScript를 이용해 클릭할 때 마다 마우스의 x좌표를 더하는 코드:</p>\n<code-example language=\"ts\">\nlet <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> = 0;\nconst rate = 1000;\nlet lastClick = Date.now() - rate;\ndocument.addEventListener('click', (event) => {\n  if (Date.now() - lastClick >= rate) {\n    <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> += event.clientX;\n    console.log(<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>);\n    lastClick = Date.now();\n  }\n});\n</code-example>\n<p>RxJS를 이용한 코드:</p>\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/throttleTime\" class=\"code-anchor\">throttleTime</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>, <a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a> } from 'rxjs';\n\n<a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click')\n  .pipe(\n    <a href=\"api/index/function/throttleTime\" class=\"code-anchor\">throttleTime</a>(1000),\n    <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>((event) => event.clientX),\n    <a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a>((<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>, clientX) => <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> + clientX, 0)\n  )\n  .subscribe((<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>) => console.log(<a href=\"api/index/function/count\" class=\"code-anchor\">count</a>));\n</code-example>\n<p>value를 다루는 다른 operator로는 <a href=\"../api/operators/pluck\"><strong>pluck</strong></a>, <a href=\"../api/operators/pairwise\"><strong>pairwise</strong></a>, <a href=\"../api/operators/sample\"><strong>sample</strong></a> 등이 있습니다.</p>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - ../api/operators/debounceTime\n - ../api/operators/delay\n - ../api/operators/distinct\n - ../api/operators/distinctUntilChanged\n - ../api/operators/filter\n - ../api/operators/pairwise\n - ../api/operators/pluck\n - ../api/operators/sample\n - ../api/operators/take\n - ../api/operators/takeUntil\n - ./guide/observable\n - api/index/function/concat\n - api/index/function/count\n - api/index/function/every\n - api/index/function/filter\n - api/index/function/fromEvent\n - api/index/function/map\n - api/index/function/reduce\n - api/index/function/scan\n - api/index/function/throttleTime\n - guide/overview#flow\n - guide/overview#purity\n - guide/overview#values\n - guide/overview#소개\n - guide/overview#예시\n - http://martinfowler.com/articles/collection-pipeline/#NestedOperatorExpressions\n - https://en.wikipedia.org/wiki/Iterator_pattern\n - https://en.wikipedia.org/wiki/Observer_pattern\n-->"
}