{"1026":{"id":"1026","label":"and emit the group as a nested Observable","options":["c0d7"]},"1151":{"id":"1151","label":"I want to know how many values it emits","options":["559b"]},"1153":{"id":"1153","label":"that throws an error","options":["d972"]},"1362":{"id":"1362","label":"EMPTY","path":"api/index/const/EMPTY","docType":"const"},"1369":{"id":"1369","label":"that iterates","options":["7fb2","8247","e018"]},"1647":{"id":"1647","label":"publishBehavior"},"1827":{"id":"1827","label":"publish"},"1944":{"id":"1944","label":"materialize","path":"api/operators/materialize","docType":"function"},"2018":{"id":"2018","label":"that just completes, without emitting values","options":["1362"]},"2602":{"id":"2602","label":"where time windows are determined by another Observable's emissions","options":["dcae"]},"2661":{"id":"2661","label":"withLatestFrom","path":"api/operators/withLatestFrom","docType":"function"},"3055":{"id":"3055","label":"where the nested Observable is calculated for each value","options":["484b"]},"3534":{"id":"3534","label":"from a Promise or an event source","options":["7eaa"]},"3584":{"id":"3584","label":"defer","path":"api/index/function/defer","docType":"function"},"3791":{"id":"3791","label":"I want to spy the values being emitted without affecting them","options":["4f94"]},"3795":{"id":"3795","label":"windowTime","path":"api/operators/windowTime","docType":"function"},"3953":{"id":"3953","label":"that never emits anything","options":["de4e"]},"4069":{"id":"4069","label":"using a conventional Subject","options":["c944","e386"]},"4151":{"id":"4151","label":"pluck"},"4229":{"id":"4229","label":"windowWhen","path":"api/operators/windowWhen","docType":"function"},"4575":{"id":"4575","label":"by emitting the last value as soon as enough silence has occurred","options":["4801","94f3"]},"4588":{"id":"4588","label":"where the nested Observable is calculated for each value","options":["372f"]},"4590":{"id":"4590","label":"I want to create a new Observable","options":["d87f","aba8","1153","2018","3953","08af","3534","1369","f578","f28c"]},"4781":{"id":"4781","label":"until another Observable emits","options":["ac8d","1026"]},"4801":{"id":"4801","label":"where the silence duration threshold is determined by another Observable","options":["4d8e"]},"4985":{"id":"4985","label":"bindNodeCallback","path":"api/index/function/bindNodeCallback","docType":"function"},"5287":{"id":"5287","label":"mapTo"},"5829":{"id":"5829","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"toPromise"},"5836":{"id":"5836","label":"that occur too frequently","options":["e820","2dd7","4575"]},"5989":{"id":"5989","label":"if they are at the end of the Observable","options":["70c0","200a"]},"6392":{"id":"6392","label":"I want to combine this Observable with others, and","options":["47da","352b","72ec"]},"7126":{"id":"7126","label":"switchMapTo"},"7658":{"id":"7658","label":"that uses an API to add and remove event handlers","options":["21ce"]},"7681":{"id":"7681","label":"I want to start a new Observable","options":["82cb"]},"7762":{"id":"7762","label":"skipUntil","path":"api/operators/skipUntil","docType":"function"},"7847":{"id":"7847","label":"zip","path":"api/index/function/zip","docType":"function"},"8130":{"id":"8130","label":"I want to output a value computed from values of the source Observables","options":["f72f","ccb1"]},"8247":{"id":"8247","label":"over values in a numeric range","options":["16b9"]},"8510":{"id":"8510","label":"where time windows are determined by another Observable's emissions","options":["f59e"]},"8626":{"id":"8626","label":"in batches of a particular size","options":["2b73","ca13"]},"8879":{"id":"8879","label":"fromEvent","path":"api/index/function/fromEvent","docType":"function"},"9273":{"id":"9273","label":"publishReplay"},"9348":{"id":"9348","label":"using a ReplaySubject","options":["9273"]},"9391":{"id":"9391","label":"using each source value only once","options":["a88c"]},"9607":{"id":"9607","label":"based on a criterion, and output two Observables: those that match the criterion and those that do not","options":["9608"]},"9608":{"id":"9608","label":"partition","path":"api/index/function/partition","docType":"function"},"9640":{"id":"9640","label":"windowCount","path":"api/operators/windowCount","docType":"function"},"9745":{"id":"9745","label":"timeInterval","path":"api/operators/timeInterval","docType":"function"},"a871":{"id":"a871","label":"to be a constant value","options":["5287"]},"057b":{"id":"057b","label":"map","path":"api/operators/map","docType":"function"},"dec3":{"id":"dec3","label":"to be a value calculated through a formula","options":["057b"]},"0cf1":{"id":"0cf1","label":"I want to change each emitted value","options":["a871","dec3"]},"c00a":{"id":"c00a","label":"I want to pick a property off each emitted value","options":["4151"]},"4f94":{"id":"4f94","label":"tap","path":"api/operators/tap","docType":"function"},"e62d":{"id":"e62d","label":"filter","path":"api/operators/filter","docType":"function"},"e378":{"id":"e378","label":"based on custom logic","options":["e62d"]},"00c2":{"id":"00c2","label":"first","path":"api/operators/first","docType":"function"},"a20c":{"id":"a20c","label":"and only the first value","options":["00c2"]},"d80b":{"id":"d80b","label":"take","path":"api/operators/take","docType":"function"},"74e7":{"id":"74e7","label":"based on a given amount","options":["d80b"]},"a01f":{"id":"a01f","label":"takeWhile","path":"api/operators/takeWhile","docType":"function"},"2f42":{"id":"2f42","label":"based on custom logic","options":["a01f"]},"e762":{"id":"e762","label":"if they are at the start of the Observable","options":["a20c","74e7","2f42"]},"d333":{"id":"d333","label":"elementAt","path":"api/operators/elementAt","docType":"function"},"d20c":{"id":"d20c","label":"if they are exactly the n-th emission","options":["d333"]},"42f7":{"id":"42f7","label":"last","path":"api/operators/last","docType":"function"},"70c0":{"id":"70c0","label":"and only the last value","options":["42f7"]},"97b7":{"id":"97b7","label":"takeLast","path":"api/operators/takeLast","docType":"function"},"200a":{"id":"200a","label":"based on a given amount","options":["97b7"]},"96ab":{"id":"96ab","label":"takeUntil","path":"api/operators/takeUntil","docType":"function"},"8bde":{"id":"8bde","label":"until another Observable emits a value","options":["96ab"]},"8be4":{"id":"8be4","label":"I want to allow some values to pass","options":["e378","e762","d20c","5989","8bde"]},"ac07":{"id":"ac07","label":"ignoreElements","path":"api/operators/ignoreElements","docType":"function"},"bd80":{"id":"bd80","label":"altogether","options":["ac07"]},"87a4":{"id":"87a4","label":"skip","path":"api/operators/skip","docType":"function"},"f589":{"id":"f589","label":"based on a given amount","options":["87a4"]},"533f":{"id":"533f","label":"skipWhile","path":"api/operators/skipWhile","docType":"function"},"ecf7":{"id":"ecf7","label":"based on custom logic","options":["533f"]},"30e6":{"id":"30e6","label":"from the start of the Observable","options":["f589","ecf7"]},"ab9b":{"id":"ab9b","label":"skipLast","path":"api/operators/skipLast","docType":"function"},"fad1":{"id":"fad1","label":"from the end of the Observable","options":["ab9b"]},"ed62":{"id":"ed62","label":"until another Observable emits a value","options":["7762"]},"8eaf":{"id":"8eaf","label":"distinctUntilChanged","path":"api/operators/distinctUntilChanged","docType":"function"},"5f60":{"id":"5f60","label":"emitted just before the current value","options":["8eaf"]},"146f":{"id":"146f","label":"distinct","path":"api/operators/distinct","docType":"function"},"e02d":{"id":"e02d","label":"emitted some time in the past","options":["146f"]},"32aa":{"id":"32aa","label":"according to value equality","options":["5f60","e02d"]},"fd25":{"id":"fd25","label":"distinctUntilKeyChanged","path":"api/operators/distinctUntilKeyChanged","docType":"function"},"f2b9":{"id":"f2b9","label":"emitted just before the current value","options":["fd25"]},"53b4":{"id":"53b4","label":"according to a key or object property","options":["f2b9"]},"bd2d":{"id":"bd2d","label":"that match some previous value","options":["32aa","53b4"]},"dcae":{"id":"dcae","label":"throttle","path":"api/operators/throttle","docType":"function"},"7f50":{"id":"7f50","label":"throttleTime","path":"api/operators/throttleTime","docType":"function"},"cf7b":{"id":"cf7b","label":"where time windows are determined by a time duration","options":["7f50"]},"e820":{"id":"e820","label":"by emitting the first value in each time window","options":["2602","cf7b"]},"f59e":{"id":"f59e","label":"audit","path":"api/operators/audit","docType":"function"},"e95f":{"id":"e95f","label":"auditTime","path":"api/operators/auditTime","docType":"function"},"67f1":{"id":"67f1","label":"where time windows are determined by a time duration","options":["e95f"]},"2dd7":{"id":"2dd7","label":"by emitting the last value in each time window","options":["8510","67f1"]},"4d8e":{"id":"4d8e","label":"debounce","path":"api/operators/debounce","docType":"function"},"bb5e":{"id":"bb5e","label":"debounceTime","path":"api/operators/debounceTime","docType":"function"},"94f3":{"id":"94f3","label":"where the silence duration threshold is determined by a time duration","options":["bb5e"]},"f5a1":{"id":"f5a1","label":"I want to ignore values","options":["bd80","30e6","fad1","ed62","bd2d","5836"]},"f8cf":{"id":"f8cf","label":"reduce","path":"api/operators/reduce","docType":"function"},"b3b7":{"id":"b3b7","label":"and only output the final computed value","options":["f8cf"]},"1b9a":{"id":"1b9a","label":"scan","path":"api/operators/scan","docType":"function"},"bb2b":{"id":"bb2b","label":"and output the computed values when the source emits a value","options":["1b9a"]},"98ca":{"id":"98ca","label":"mergeScan","path":"api/operators/mergeScan","docType":"function"},"a371":{"id":"a371","label":"and output the computed values as a nested Observable when the source emits a value","options":["98ca"]},"8a98":{"id":"8a98","label":"switchScan","path":"api/operators/switchScan","docType":"function"},"87fc":{"id":"87fc","label":"and output the computed values as a nested Observable when the source emits a value while unsubscribing from the previous nested Observable","options":["8a98"]},"e79b":{"id":"e79b","label":"I want to compute a formula using all values emitted","options":["b3b7","bb2b","a371","87fc"]},"ed0e":{"id":"ed0e","label":"that describes each notification (next, error, or complete)","options":["1944"]},"b8f2":{"id":"b8f2","label":"that includes the time past since the last emitted value","options":["9745"]},"b4b4":{"id":"b4b4","label":"I want to wrap its messages with metadata","options":["ed0e","b8f2"]},"e090":{"id":"e090","label":"timeout","path":"api/operators/timeout","docType":"function"},"795d":{"id":"795d","label":"I want to throw an error","options":["e090"]},"30d2":{"id":"30d2","label":"timeoutWith"},"122b":{"id":"122b","label":"I want to switch to another Observable","options":["30d2"]},"74ab":{"id":"74ab","label":"after a period of inactivity","options":["795d","122b"]},"ed74":{"id":"ed74","label":"single","path":"api/operators/single","docType":"function"},"585c":{"id":"585c","label":"I want to ensure there is only one value","options":["ed74"]},"559b":{"id":"559b","label":"count","path":"api/operators/count","docType":"function"},"90a4":{"id":"90a4","label":"startWith"},"db8f":{"id":"db8f","label":"I want to prepend one value","options":["90a4"]},"73ac":{"id":"73ac","label":"delay","path":"api/operators/delay","docType":"function"},"818d":{"id":"818d","label":"based on a given amount of time","options":["73ac"]},"429f":{"id":"429f","label":"delayWhen","path":"api/operators/delayWhen","docType":"function"},"9b69":{"id":"9b69","label":"based on the emissions of another Observable","options":["429f"]},"fa97":{"id":"fa97","label":"I want to delay the emissions","options":["818d","9b69"]},"9cab":{"id":"9cab","label":"toArray","path":"api/operators/toArray","docType":"function"},"de9e":{"id":"de9e","label":"and convert to an array","options":["9cab"]},"0afd":{"id":"0afd","label":"and convert to a Promise","options":["5829"]},"ff3c":{"id":"ff3c","label":"until the Observable completes","options":["de9e","0afd"]},"7d6d":{"id":"7d6d","label":"pairwise","path":"api/operators/pairwise","docType":"function"},"278a":{"id":"278a","label":"consecutively in pairs, as arrays","options":["7d6d"]},"e452":{"id":"e452","label":"bufferCount","path":"api/operators/bufferCount","docType":"function"},"2b73":{"id":"2b73","label":"and emit the group as an array","options":["e452"]},"ca13":{"id":"ca13","label":"and emit the group as a nested Observable","options":["9640"]},"f62b":{"id":"f62b","label":"bufferTime","path":"api/operators/bufferTime","docType":"function"},"436e":{"id":"436e","label":"and emit the group as an array","options":["f62b"]},"6adb":{"id":"6adb","label":"and emit the group as a nested Observable","options":["3795"]},"3a5e":{"id":"3a5e","label":"based on time","options":["436e","6adb"]},"090c":{"id":"090c","label":"buffer","path":"api/operators/buffer","docType":"function"},"ac8d":{"id":"ac8d","label":"and emit the group as an array","options":["090c"]},"c0d7":{"id":"c0d7","label":"window","path":"api/operators/window","docType":"function"},"6ca3":{"id":"6ca3","label":"bufferWhen","path":"api/operators/bufferWhen","docType":"function"},"da2c":{"id":"da2c","label":"and emit the group as an array","options":["6ca3"]},"a12c":{"id":"a12c","label":"and emit the group as a nested Observable","options":["4229"]},"70f0":{"id":"70f0","label":"based on the emissions of an Observable created on-demand","options":["da2c","a12c"]},"f3b7":{"id":"f3b7","label":"bufferToggle","path":"api/operators/bufferToggle","docType":"function"},"81f9":{"id":"81f9","label":"and emit the group as an array","options":["f3b7"]},"6bee":{"id":"6bee","label":"windowToggle","path":"api/operators/windowToggle","docType":"function"},"d5ea":{"id":"d5ea","label":"and emit the group as a nested Observable","options":["6bee"]},"1bfb":{"id":"1bfb","label":"based on another Observable for opening a group, and an Observable for closing a group","options":["81f9","d5ea"]},"b723":{"id":"b723","label":"groupBy","path":"api/operators/groupBy","docType":"function"},"a4e6":{"id":"a4e6","label":"based on a key calculated from the emitted values","options":["b723"]},"a55b":{"id":"a55b","label":"I want to group the values","options":["ff3c","278a","9607","8626","3a5e","4781","70f0","1bfb","a4e6"]},"1ddd":{"id":"1ddd","label":"mergeMapTo"},"8dbd":{"id":"8dbd","label":"where the nested Observable is the same for every value","options":["1ddd"]},"d80a":{"id":"d80a","label":"mergeMap","path":"api/operators/mergeMap","docType":"function"},"bb9b":{"id":"bb9b","label":"where the nested Observable is calculated for each value","options":["d80a"]},"83c5":{"id":"83c5","label":"and emit the values from all nested Observables in parallel","options":["8dbd","bb9b"]},"d0ff":{"id":"d0ff","label":"concatMapTo"},"e3b5":{"id":"e3b5","label":"where the nested Observable is the same for every value","options":["d0ff"]},"484b":{"id":"484b","label":"concatMap","path":"api/operators/concatMap","docType":"function"},"130c":{"id":"130c","label":"and emit the values from each nested Observable in order","options":["e3b5","3055"]},"06a7":{"id":"06a7","label":"where the nested Observable is the same for every value","options":["7126"]},"372f":{"id":"372f","label":"switchMap","path":"api/operators/switchMap","docType":"function"},"b6cf":{"id":"b6cf","label":"and cancel the previous nested Observable when a new value arrives","options":["06a7","4588"]},"8df2":{"id":"8df2","label":"exhaustMap","path":"api/operators/exhaustMap","docType":"function"},"f89a":{"id":"f89a","label":"and ignore incoming values while the current nested Observable has not yet completed","options":["8df2"]},"9a1c":{"id":"9a1c","label":"expand","path":"api/operators/expand","docType":"function"},"fc20":{"id":"fc20","label":"and recursively start a new Observable for each new value","options":["9a1c"]},"8aee":{"id":"8aee","label":"I want to start a new Observable for each value","options":["83c5","130c","b6cf","f89a","fc20"]},"9c0d":{"id":"9c0d","label":"pipe","path":"api/index/function/pipe","docType":"function"},"4ace":{"id":"4ace","label":"I want to perform custom operations","options":["9c0d"]},"26cf":{"id":"26cf","label":"share","path":"api/operators/share","docType":"function"},"c944":{"id":"c944","label":"and start it as soon as the first subscriber arrives","options":["26cf"]},"e386":{"id":"e386","label":"and start it manually or imperatively","options":["1827"]},"5a0e":{"id":"5a0e","label":"using a BehaviorSubject","options":["1647"]},"1ae2":{"id":"1ae2","label":"publishLast"},"03d3":{"id":"03d3","label":"using an AsyncSubject","options":["1ae2"]},"4a86":{"id":"4a86","label":"multicast"},"9ae3":{"id":"9ae3","label":"using a specific subject implementation","options":["4a86"]},"ce67":{"id":"ce67","label":"I want to share a subscription between multiple subscribers","options":["4069","5a0e","9348","03d3","9ae3"]},"56c0":{"id":"56c0","label":"catchError","path":"api/operators/catchError","docType":"function"},"393b":{"id":"393b","label":"I want to start a new Observable","options":["56c0"]},"758c":{"id":"758c","label":"retry","path":"api/operators/retry","docType":"function"},"76e8":{"id":"76e8","label":"immediately","options":["758c"]},"6acb":{"id":"6acb","label":"retryWhen"},"f355":{"id":"f355","label":"when another Observable emits","options":["6acb"]},"10f1":{"id":"10f1","label":"I want to re-subscribe","options":["76e8","f355"]},"a97b":{"id":"a97b","label":"when an error occurs","options":["393b","10f1"]},"dd0d":{"id":"dd0d","label":"repeat","path":"api/operators/repeat","docType":"function"},"7e94":{"id":"7e94","label":"immediately","options":["dd0d"]},"855e":{"id":"855e","label":"repeatWhen"},"21e9":{"id":"21e9","label":"when another Observable emits","options":["855e"]},"fcb3":{"id":"fcb3","label":"I want to re-subscribe","options":["7e94","21e9"]},"82cb":{"id":"82cb","label":"concat","path":"api/index/function/concat","docType":"function"},"39a6":{"id":"39a6","label":"when it completes","options":["fcb3","7681"]},"69d7":{"id":"69d7","label":"finalize","path":"api/operators/finalize","docType":"function"},"516a":{"id":"516a","label":"when it completes, errors or unsubscribes, I want to execute a function","options":["69d7"]},"e840":{"id":"e840","label":"subscribeOn","path":"api/operators/subscribeOn","docType":"function"},"7d62":{"id":"7d62","label":"that routes calls to subscribe","options":["e840"]},"55b6":{"id":"55b6","label":"observeOn","path":"api/operators/observeOn","docType":"function"},"a755":{"id":"a755","label":"that routes values to observers","options":["55b6"]},"b64e":{"id":"b64e","label":"I want to change the scheduler","options":["7d62","a755"]},"e08b":{"id":"e08b","label":"race","path":"api/index/function/race","docType":"function"},"47da":{"id":"47da","label":"I want to receive values only from the Observable that emits a value first","options":["e08b"]},"dbde":{"id":"dbde","label":"merge","path":"api/index/function/merge","docType":"function"},"352b":{"id":"352b","label":"I want to output the values from either of them","options":["dbde"]},"76fe":{"id":"76fe","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"d8cb":{"id":"d8cb","label":"using the latest value of each source whenever any source emits","options":["76fe"]},"24d7":{"id":"24d7","label":"using the latest value of each source only when the primary Observable emits","options":["2661"]},"a88c":{"id":"a88c","label":"zip","path":"api/index/function/zip","docType":"function"},"72ec":{"id":"72ec","label":"I want to output a value computed from values of the source Observables","options":["d8cb","24d7","9391"]},"d0ef":{"id":"d0ef","label":"I have one existing Observable, and","options":["0cf1","c00a","3791","8be4","f5a1","e79b","b4b4","74ab","585c","1151","db8f","fa97","a55b","8aee","4ace","ce67","a97b","39a6","516a","b64e","6392"]},"3cbb":{"id":"3cbb","label":"race","path":"api/index/function/race","docType":"function"},"a7fc":{"id":"a7fc","label":"I want to receive values only from the Observable that emits a value first","options":["3cbb"]},"b42b":{"id":"b42b","label":"forkJoin","path":"api/index/function/forkJoin","docType":"function"},"be96":{"id":"be96","label":"I want to be notified when all of them have completed","options":["b42b"]},"02b4":{"id":"02b4","label":"merge","path":"api/index/function/merge","docType":"function"},"c6a9":{"id":"c6a9","label":"I want to output the values from either of them","options":["02b4"]},"7aff":{"id":"7aff","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"f72f":{"id":"f72f","label":"using the latest value of each source whenever any source emits","options":["7aff"]},"ccb1":{"id":"ccb1","label":"using each source value only once","options":["7847"]},"15da":{"id":"15da","label":"concat","path":"api/index/function/concat","docType":"function"},"d82b":{"id":"d82b","label":"I want to subscribe to each in order","options":["15da"]},"f808":{"id":"f808","label":"I have some Observables to combine together as one Observable, and","options":["a7fc","be96","c6a9","8130","d82b"]},"2a52":{"id":"2a52","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"create"},"d87f":{"id":"d87f","label":"using custom logic","options":["2a52"]},"fed3":{"id":"fed3","label":"generate","path":"api/index/function/generate","docType":"function"},"aba8":{"id":"aba8","label":"using a state machine similar to a for loop","options":["fed3"]},"d972":{"id":"d972","label":"throwError","path":"api/index/function/throwError","docType":"function"},"de4e":{"id":"de4e","label":"NEVER","path":"api/index/const/NEVER","docType":"const"},"db45":{"id":"db45","label":"coming from the DOM or Node.js or similar","options":["8879"]},"21ce":{"id":"21ce","label":"fromEventPattern","path":"api/index/function/fromEventPattern","docType":"function"},"08af":{"id":"08af","label":"from an existing source of events","options":["db45","7658"]},"7eaa":{"id":"7eaa","label":"from","path":"api/index/function/from","docType":"function"},"448b":{"id":"448b","label":"from","path":"api/index/function/from","docType":"function"},"7fb2":{"id":"7fb2","label":"over the values in an array","options":["448b"]},"16b9":{"id":"16b9","label":"range","path":"api/index/function/range","docType":"function"},"2feb":{"id":"2feb","label":"of"},"e018":{"id":"e018","label":"over prefined values given as arguments","options":["2feb"]},"6eee":{"id":"6eee","label":"interval","path":"api/index/function/interval","docType":"function"},"7f67":{"id":"7f67","label":"regularly","options":["6eee"]},"bec0":{"id":"bec0","label":"timer","path":"api/index/function/timer","docType":"function"},"e1d4":{"id":"e1d4","label":"with an optional initial delay","options":["bec0"]},"f578":{"id":"f578","label":"that emits values on a timer","options":["7f67","e1d4"]},"f28c":{"id":"f28c","label":"which is built on demand when subscribed","options":["3584"]},"5e24":{"id":"5e24","label":"bindCallback","path":"api/index/function/bindCallback","docType":"function"},"202a":{"id":"202a","label":"supporting a conventional callback API","options":["5e24"]},"f530":{"id":"f530","label":"supporting Node.js callback style API","options":["4985"]},"b0a8":{"id":"b0a8","label":"I want to convert a callback to an Observable","options":["202a","f530"]},"b646":{"id":"b646","label":"I have no Observables yet, and","options":["4590","b0a8"]},"initial":{"id":"initial","options":["d0ef","f808","b646"]}}