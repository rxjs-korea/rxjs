{"1093":{"id":"1093","label":"and only the first value","options":["b025"]},"1179":{"id":"1179","label":"that routes values to observers","options":["dde7"]},"1396":{"id":"1396","label":"forkJoin","path":"api/index/function/forkJoin","docType":"function"},"2182":{"id":"2182","label":"scan","path":"api/operators/scan","docType":"function"},"2211":{"id":"2211","label":"and emit the group as an array","options":["37f1"]},"2312":{"id":"2312","label":"I want to receive values only from the Observable that emits a value first","options":["82e1"]},"2364":{"id":"2364","label":"bufferTime","path":"api/operators/bufferTime","docType":"function"},"2511":{"id":"2511","label":"map","path":"api/operators/map","docType":"function"},"3264":{"id":"3264","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"toPromise"},"3395":{"id":"3395","label":"switchScan","path":"api/operators/switchScan","docType":"function"},"3681":{"id":"3681","label":"windowToggle","path":"api/operators/windowToggle","docType":"function"},"3704":{"id":"3704","label":"multicast"},"3772":{"id":"3772","label":"count","path":"api/operators/count","docType":"function"},"3955":{"id":"3955","label":"I want to know how many values it emits","options":["3772"]},"4137":{"id":"4137","label":"filter","path":"api/operators/filter","docType":"function"},"4357":{"id":"4357","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"create"},"4884":{"id":"4884","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"5917":{"id":"5917","label":"when it completes, errors or unsubscribes, I want to execute a function","options":["853f"]},"7496":{"id":"7496","label":"I want to perform custom operations","options":["9234"]},"7628":{"id":"7628","label":"and only output the final computed value","options":["b9b3"]},"7718":{"id":"7718","label":"from the start of the Observable","options":["2364","7854"]},"7854":{"id":"7854","label":"based on custom logic","options":["5fab"]},"8075":{"id":"8075","label":"last","path":"api/operators/last","docType":"function"},"8274":{"id":"8274","label":"emitted some time in the past","options":["5e84"]},"8459":{"id":"8459","label":"I want to re-subscribe","options":["0f25","27b8"]},"8669":{"id":"8669","label":"where the silence duration threshold is determined by another Observable","options":["cf21"]},"8994":{"id":"8994","label":"toArray","path":"api/operators/toArray","docType":"function"},"9064":{"id":"9064","label":"catchError","path":"api/operators/catchError","docType":"function"},"9234":{"id":"9234","label":"pipe","path":"api/index/function/pipe","docType":"function"},"3ace":{"id":"3ace","label":"mapTo"},"ec5f":{"id":"ec5f","label":"to be a constant value","options":["3ace"]},"e719":{"id":"e719","label":"to be a value calculated through a formula","options":["2511"]},"c735":{"id":"c735","label":"I want to change each emitted value","options":["ec5f","e719"]},"16d6":{"id":"16d6","label":"pluck"},"a848":{"id":"a848","label":"I want to pick a property off each emitted value","options":["16d6"]},"1e5d":{"id":"1e5d","label":"tap","path":"api/operators/tap","docType":"function"},"d6e3":{"id":"d6e3","label":"I want to spy the values being emitted without affecting them","options":["1e5d"]},"867a":{"id":"867a","label":"based on custom logic","options":["4137"]},"b025":{"id":"b025","label":"first","path":"api/operators/first","docType":"function"},"c18f":{"id":"c18f","label":"take","path":"api/operators/take","docType":"function"},"93b1":{"id":"93b1","label":"based on a given amount","options":["c18f"]},"92cc":{"id":"92cc","label":"takeWhile","path":"api/operators/takeWhile","docType":"function"},"aec3":{"id":"aec3","label":"based on custom logic","options":["92cc"]},"3f96":{"id":"3f96","label":"if they are at the start of the Observable","options":["1093","93b1","aec3"]},"f4c3":{"id":"f4c3","label":"elementAt","path":"api/operators/elementAt","docType":"function"},"8c9e":{"id":"8c9e","label":"if they are exactly the n-th emission","options":["f4c3"]},"e204":{"id":"e204","label":"and only the last value","options":["8075"]},"b0b8":{"id":"b0b8","label":"takeLast","path":"api/operators/takeLast","docType":"function"},"0aff":{"id":"0aff","label":"based on a given amount","options":["b0b8"]},"0efd":{"id":"0efd","label":"if they are at the end of the Observable","options":["e204","0aff"]},"53c6":{"id":"53c6","label":"takeUntil","path":"api/operators/takeUntil","docType":"function"},"185a":{"id":"185a","label":"until another Observable emits a value","options":["53c6"]},"ccb0":{"id":"ccb0","label":"I want to allow some values to pass","options":["867a","3f96","8c9e","0efd","185a"]},"a821":{"id":"a821","label":"ignoreElements","path":"api/operators/ignoreElements","docType":"function"},"a19f":{"id":"a19f","label":"altogether","options":["a821"]},"a252":{"id":"a252","label":"skip","path":"api/operators/skip","docType":"function"},"5fab":{"id":"5fab","label":"skipWhile","path":"api/operators/skipWhile","docType":"function"},"556f":{"id":"556f","label":"skipLast","path":"api/operators/skipLast","docType":"function"},"a0c2":{"id":"a0c2","label":"from the end of the Observable","options":["556f"]},"d234":{"id":"d234","label":"skipUntil","path":"api/operators/skipUntil","docType":"function"},"439b":{"id":"439b","label":"until another Observable emits a value","options":["d234"]},"eb41":{"id":"eb41","label":"distinctUntilChanged","path":"api/operators/distinctUntilChanged","docType":"function"},"ad17":{"id":"ad17","label":"emitted just before the current value","options":["eb41"]},"5e84":{"id":"5e84","label":"distinct","path":"api/operators/distinct","docType":"function"},"2d07":{"id":"2d07","label":"according to value equality","options":["ad17","8274"]},"f2f0":{"id":"f2f0","label":"distinctUntilKeyChanged","path":"api/operators/distinctUntilKeyChanged","docType":"function"},"a62d":{"id":"a62d","label":"emitted just before the current value","options":["f2f0"]},"12ce":{"id":"12ce","label":"according to a key or object property","options":["a62d"]},"b790":{"id":"b790","label":"that match some previous value","options":["2d07","12ce"]},"146c":{"id":"146c","label":"throttle","path":"api/operators/throttle","docType":"function"},"2c25":{"id":"2c25","label":"where time windows are determined by another Observable's emissions","options":["146c"]},"63ce":{"id":"63ce","label":"throttleTime","path":"api/operators/throttleTime","docType":"function"},"e133":{"id":"e133","label":"where time windows are determined by a time duration","options":["63ce"]},"d18f":{"id":"d18f","label":"by emitting the first value in each time window","options":["2c25","e133"]},"2e17":{"id":"2e17","label":"audit","path":"api/operators/audit","docType":"function"},"0f58":{"id":"0f58","label":"where time windows are determined by another Observable's emissions","options":["2e17"]},"a588":{"id":"a588","label":"auditTime","path":"api/operators/auditTime","docType":"function"},"8d18":{"id":"8d18","label":"where time windows are determined by a time duration","options":["a588"]},"a59a":{"id":"a59a","label":"by emitting the last value in each time window","options":["0f58","8d18"]},"cf21":{"id":"cf21","label":"debounce","path":"api/operators/debounce","docType":"function"},"29e9":{"id":"29e9","label":"debounceTime","path":"api/operators/debounceTime","docType":"function"},"ae1e":{"id":"ae1e","label":"where the silence duration threshold is determined by a time duration","options":["29e9"]},"4f69":{"id":"4f69","label":"by emitting the last value as soon as enough silence has occurred","options":["8669","ae1e"]},"f8f0":{"id":"f8f0","label":"that occur too frequently","options":["d18f","a59a","4f69"]},"ebe1":{"id":"ebe1","label":"I want to ignore values","options":["a19f","7718","a0c2","439b","b790","f8f0"]},"b9b3":{"id":"b9b3","label":"reduce","path":"api/operators/reduce","docType":"function"},"f814":{"id":"f814","label":"and output the computed values when the source emits a value","options":["2182"]},"c650":{"id":"c650","label":"mergeScan","path":"api/operators/mergeScan","docType":"function"},"b76c":{"id":"b76c","label":"and output the computed values as a nested Observable when the source emits a value","options":["c650"]},"66fd":{"id":"66fd","label":"and output the computed values as a nested Observable when the source emits a value while unsubscribing from the previous nested Observable","options":["3395"]},"d844":{"id":"d844","label":"I want to compute a formula using all values emitted","options":["7628","f814","b76c","66fd"]},"36da":{"id":"36da","label":"materialize","path":"api/operators/materialize","docType":"function"},"e97a":{"id":"e97a","label":"that describes each notification (next, error, or complete)","options":["36da"]},"df75":{"id":"df75","label":"timeInterval","path":"api/operators/timeInterval","docType":"function"},"a5aa":{"id":"a5aa","label":"that includes the time past since the last emitted value","options":["df75"]},"ca92":{"id":"ca92","label":"I want to wrap its messages with metadata","options":["e97a","a5aa"]},"454e":{"id":"454e","label":"timeout","path":"api/operators/timeout","docType":"function"},"0880":{"id":"0880","label":"I want to throw an error","options":["454e"]},"b1e9":{"id":"b1e9","label":"timeoutWith"},"58a4":{"id":"58a4","label":"I want to switch to another Observable","options":["b1e9"]},"da3a":{"id":"da3a","label":"after a period of inactivity","options":["0880","58a4"]},"b974":{"id":"b974","label":"single","path":"api/operators/single","docType":"function"},"cb4a":{"id":"cb4a","label":"I want to ensure there is only one value","options":["b974"]},"8dcf":{"id":"8dcf","label":"startWith"},"35fe":{"id":"35fe","label":"I want to prepend one value","options":["8dcf"]},"c8f7":{"id":"c8f7","label":"delay","path":"api/operators/delay","docType":"function"},"0f86":{"id":"0f86","label":"based on a given amount of time","options":["c8f7"]},"13db":{"id":"13db","label":"delayWhen","path":"api/operators/delayWhen","docType":"function"},"86b1":{"id":"86b1","label":"based on the emissions of another Observable","options":["13db"]},"d93f":{"id":"d93f","label":"I want to delay the emissions","options":["0f86","86b1"]},"bf4e":{"id":"bf4e","label":"and convert to an array","options":["8994"]},"c264":{"id":"c264","label":"and convert to a Promise","options":["3264"]},"833b":{"id":"833b","label":"until the Observable completes","options":["bf4e","c264"]},"2aae":{"id":"2aae","label":"pairwise","path":"api/operators/pairwise","docType":"function"},"d6b2":{"id":"d6b2","label":"consecutively in pairs, as arrays","options":["2aae"]},"d335":{"id":"d335","label":"partition","path":"api/index/function/partition","docType":"function"},"aa17":{"id":"aa17","label":"based on a criterion, and output two Observables: those that match the criterion and those that do not","options":["d335"]},"37f1":{"id":"37f1","label":"bufferCount","path":"api/operators/bufferCount","docType":"function"},"a450":{"id":"a450","label":"windowCount","path":"api/operators/windowCount","docType":"function"},"020c":{"id":"020c","label":"and emit the group as a nested Observable","options":["a450"]},"380c":{"id":"380c","label":"in batches of a particular size","options":["2211","020c"]},"f1c0":{"id":"f1c0","label":"and emit the group as an array","options":["2364"]},"916c":{"id":"916c","label":"windowTime","path":"api/operators/windowTime","docType":"function"},"20b6":{"id":"20b6","label":"and emit the group as a nested Observable","options":["916c"]},"792f":{"id":"792f","label":"based on time","options":["f1c0","20b6"]},"da4e":{"id":"da4e","label":"buffer","path":"api/operators/buffer","docType":"function"},"8b36":{"id":"8b36","label":"and emit the group as an array","options":["da4e"]},"1d50":{"id":"1d50","label":"window","path":"api/operators/window","docType":"function"},"1c60":{"id":"1c60","label":"and emit the group as a nested Observable","options":["1d50"]},"9f8a":{"id":"9f8a","label":"until another Observable emits","options":["8b36","1c60"]},"fe45":{"id":"fe45","label":"bufferWhen","path":"api/operators/bufferWhen","docType":"function"},"554e":{"id":"554e","label":"and emit the group as an array","options":["fe45"]},"296f":{"id":"296f","label":"windowWhen","path":"api/operators/windowWhen","docType":"function"},"3ec9":{"id":"3ec9","label":"and emit the group as a nested Observable","options":["296f"]},"ad50":{"id":"ad50","label":"based on the emissions of an Observable created on-demand","options":["554e","3ec9"]},"09fc":{"id":"09fc","label":"bufferToggle","path":"api/operators/bufferToggle","docType":"function"},"19c1":{"id":"19c1","label":"and emit the group as an array","options":["09fc"]},"b3ca":{"id":"b3ca","label":"and emit the group as a nested Observable","options":["3681"]},"9f96":{"id":"9f96","label":"based on another Observable for opening a group, and an Observable for closing a group","options":["19c1","b3ca"]},"f86f":{"id":"f86f","label":"groupBy","path":"api/operators/groupBy","docType":"function"},"2c8d":{"id":"2c8d","label":"based on a key calculated from the emitted values","options":["f86f"]},"df98":{"id":"df98","label":"I want to group the values","options":["833b","d6b2","aa17","380c","792f","9f8a","ad50","9f96","2c8d"]},"6e90":{"id":"6e90","label":"mergeMapTo"},"7e85":{"id":"7e85","label":"where the nested Observable is the same for every value","options":["6e90"]},"a7a2":{"id":"a7a2","label":"mergeMap","path":"api/operators/mergeMap","docType":"function"},"285c":{"id":"285c","label":"where the nested Observable is calculated for each value","options":["a7a2"]},"bdc8":{"id":"bdc8","label":"and emit the values from all nested Observables in parallel","options":["7e85","285c"]},"d4aa":{"id":"d4aa","label":"concatMapTo"},"36dd":{"id":"36dd","label":"where the nested Observable is the same for every value","options":["d4aa"]},"0a1c":{"id":"0a1c","label":"concatMap","path":"api/operators/concatMap","docType":"function"},"da5e":{"id":"da5e","label":"where the nested Observable is calculated for each value","options":["0a1c"]},"a96f":{"id":"a96f","label":"and emit the values from each nested Observable in order","options":["36dd","da5e"]},"9cfd":{"id":"9cfd","label":"switchMapTo"},"a6b1":{"id":"a6b1","label":"where the nested Observable is the same for every value","options":["9cfd"]},"26c9":{"id":"26c9","label":"switchMap","path":"api/operators/switchMap","docType":"function"},"5f77":{"id":"5f77","label":"where the nested Observable is calculated for each value","options":["26c9"]},"808c":{"id":"808c","label":"and cancel the previous nested Observable when a new value arrives","options":["a6b1","5f77"]},"7fb7":{"id":"7fb7","label":"exhaustMap","path":"api/operators/exhaustMap","docType":"function"},"2dba":{"id":"2dba","label":"and ignore incoming values while the current nested Observable has not yet completed","options":["7fb7"]},"1b19":{"id":"1b19","label":"expand","path":"api/operators/expand","docType":"function"},"cba1":{"id":"cba1","label":"and recursively start a new Observable for each new value","options":["1b19"]},"63b7":{"id":"63b7","label":"I want to start a new Observable for each value","options":["bdc8","a96f","808c","2dba","cba1"]},"80a1":{"id":"80a1","label":"share","path":"api/operators/share","docType":"function"},"e840":{"id":"e840","label":"and start it as soon as the first subscriber arrives","options":["80a1"]},"0113":{"id":"0113","label":"publish"},"f60a":{"id":"f60a","label":"and start it manually or imperatively","options":["0113"]},"04af":{"id":"04af","label":"using a conventional Subject","options":["e840","f60a"]},"7b59":{"id":"7b59","label":"publishBehavior"},"d5de":{"id":"d5de","label":"using a BehaviorSubject","options":["7b59"]},"0731":{"id":"0731","label":"publishReplay"},"71aa":{"id":"71aa","label":"using a ReplaySubject","options":["0731"]},"80a3":{"id":"80a3","label":"publishLast"},"5dda":{"id":"5dda","label":"using an AsyncSubject","options":["80a3"]},"ecff":{"id":"ecff","label":"using a specific subject implementation","options":["3704"]},"4cff":{"id":"4cff","label":"I want to share a subscription between multiple subscribers","options":["04af","d5de","71aa","5dda","ecff"]},"8ba7":{"id":"8ba7","label":"I want to start a new Observable","options":["9064"]},"6f78":{"id":"6f78","label":"retry","path":"api/operators/retry","docType":"function"},"7b2a":{"id":"7b2a","label":"immediately","options":["6f78"]},"7fca":{"id":"7fca","label":"retryWhen"},"ad0f":{"id":"ad0f","label":"when another Observable emits","options":["7fca"]},"8a19":{"id":"8a19","label":"I want to re-subscribe","options":["7b2a","ad0f"]},"00fc":{"id":"00fc","label":"when an error occurs","options":["8ba7","8a19"]},"5a18":{"id":"5a18","label":"repeat","path":"api/operators/repeat","docType":"function"},"0f25":{"id":"0f25","label":"immediately","options":["5a18"]},"3df6":{"id":"3df6","label":"repeatWhen"},"27b8":{"id":"27b8","label":"when another Observable emits","options":["3df6"]},"3de2":{"id":"3de2","label":"concat","path":"api/index/function/concat","docType":"function"},"b3ae":{"id":"b3ae","label":"I want to start a new Observable","options":["3de2"]},"d316":{"id":"d316","label":"when it completes","options":["8459","b3ae"]},"853f":{"id":"853f","label":"finalize","path":"api/operators/finalize","docType":"function"},"12e2":{"id":"12e2","label":"subscribeOn","path":"api/operators/subscribeOn","docType":"function"},"cb18":{"id":"cb18","label":"that routes calls to subscribe","options":["12e2"]},"dde7":{"id":"dde7","label":"observeOn","path":"api/operators/observeOn","docType":"function"},"442b":{"id":"442b","label":"I want to change the scheduler","options":["cb18","1179"]},"82e1":{"id":"82e1","label":"race","path":"api/index/function/race","docType":"function"},"086c":{"id":"086c","label":"merge","path":"api/index/function/merge","docType":"function"},"a8e6":{"id":"a8e6","label":"I want to output the values from either of them","options":["086c"]},"ba66":{"id":"ba66","label":"using the latest value of each source whenever any source emits","options":["4884"]},"53fa":{"id":"53fa","label":"withLatestFrom","path":"api/operators/withLatestFrom","docType":"function"},"c428":{"id":"c428","label":"using the latest value of each source only when the primary Observable emits","options":["53fa"]},"30ca":{"id":"30ca","label":"zip","path":"api/index/function/zip","docType":"function"},"722d":{"id":"722d","label":"using each source value only once","options":["30ca"]},"b6fe":{"id":"b6fe","label":"I want to output a value computed from values of the source Observables","options":["ba66","c428","722d"]},"14be":{"id":"14be","label":"I want to combine this Observable with others, and","options":["2312","a8e6","b6fe"]},"80b7":{"id":"80b7","label":"I have one existing Observable, and","options":["c735","a848","d6e3","ccb0","ebe1","d844","ca92","da3a","cb4a","3955","35fe","d93f","df98","63b7","7496","4cff","00fc","d316","5917","442b","14be"]},"724b":{"id":"724b","label":"race","path":"api/index/function/race","docType":"function"},"a01e":{"id":"a01e","label":"I want to receive values only from the Observable that emits a value first","options":["724b"]},"08ff":{"id":"08ff","label":"I want to be notified when all of them have completed","options":["1396"]},"0584":{"id":"0584","label":"merge","path":"api/index/function/merge","docType":"function"},"5d5d":{"id":"5d5d","label":"I want to output the values from either of them","options":["0584"]},"5f3c":{"id":"5f3c","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"9ed6":{"id":"9ed6","label":"using the latest value of each source whenever any source emits","options":["5f3c"]},"5cee":{"id":"5cee","label":"zip","path":"api/index/function/zip","docType":"function"},"cb99":{"id":"cb99","label":"using each source value only once","options":["5cee"]},"d611":{"id":"d611","label":"I want to output a value computed from values of the source Observables","options":["9ed6","cb99"]},"a85a":{"id":"a85a","label":"concat","path":"api/index/function/concat","docType":"function"},"1ff7":{"id":"1ff7","label":"I want to subscribe to each in order","options":["a85a"]},"da45":{"id":"da45","label":"I have some Observables to combine together as one Observable, and","options":["a01e","08ff","5d5d","d611","1ff7"]},"307a":{"id":"307a","label":"using custom logic","options":["4357"]},"4bae":{"id":"4bae","label":"generate","path":"api/index/function/generate","docType":"function"},"e4fe":{"id":"e4fe","label":"using a state machine similar to a for loop","options":["4bae"]},"638e":{"id":"638e","label":"throwError","path":"api/index/function/throwError","docType":"function"},"8e7f":{"id":"8e7f","label":"that throws an error","options":["638e"]},"559a":{"id":"559a","label":"EMPTY","path":"api/index/const/EMPTY","docType":"const"},"aed1":{"id":"aed1","label":"that just completes, without emitting values","options":["559a"]},"f8e5":{"id":"f8e5","label":"NEVER","path":"api/index/const/NEVER","docType":"const"},"18de":{"id":"18de","label":"that never emits anything","options":["f8e5"]},"e2fd":{"id":"e2fd","label":"fromEvent","path":"api/index/function/fromEvent","docType":"function"},"47af":{"id":"47af","label":"coming from the DOM or Node.js or similar","options":["e2fd"]},"c26f":{"id":"c26f","label":"fromEventPattern","path":"api/index/function/fromEventPattern","docType":"function"},"e92a":{"id":"e92a","label":"that uses an API to add and remove event handlers","options":["c26f"]},"709f":{"id":"709f","label":"from an existing source of events","options":["47af","e92a"]},"e459":{"id":"e459","label":"from","path":"api/index/function/from","docType":"function"},"ae73":{"id":"ae73","label":"from a Promise or an event source","options":["e459"]},"4c74":{"id":"4c74","label":"from","path":"api/index/function/from","docType":"function"},"c4ce":{"id":"c4ce","label":"over the values in an array","options":["4c74"]},"31eb":{"id":"31eb","label":"range","path":"api/index/function/range","docType":"function"},"73e8":{"id":"73e8","label":"over values in a numeric range","options":["31eb"]},"3a7e":{"id":"3a7e","label":"of"},"2bbf":{"id":"2bbf","label":"over prefined values given as arguments","options":["3a7e"]},"cecc":{"id":"cecc","label":"that iterates","options":["c4ce","73e8","2bbf"]},"b893":{"id":"b893","label":"interval","path":"api/index/function/interval","docType":"function"},"2a8d":{"id":"2a8d","label":"regularly","options":["b893"]},"3e52":{"id":"3e52","label":"timer","path":"api/index/function/timer","docType":"function"},"caaa":{"id":"caaa","label":"with an optional initial delay","options":["3e52"]},"ac6b":{"id":"ac6b","label":"that emits values on a timer","options":["2a8d","caaa"]},"f158":{"id":"f158","label":"defer","path":"api/index/function/defer","docType":"function"},"173d":{"id":"173d","label":"which is built on demand when subscribed","options":["f158"]},"97d1":{"id":"97d1","label":"I want to create a new Observable","options":["307a","e4fe","8e7f","aed1","18de","709f","ae73","cecc","ac6b","173d"]},"cbe2":{"id":"cbe2","label":"bindCallback","path":"api/index/function/bindCallback","docType":"function"},"ab9d":{"id":"ab9d","label":"supporting a conventional callback API","options":["cbe2"]},"b90d":{"id":"b90d","label":"bindNodeCallback","path":"api/index/function/bindNodeCallback","docType":"function"},"7b71":{"id":"7b71","label":"supporting Node.js callback style API","options":["b90d"]},"cca5":{"id":"cca5","label":"I want to convert a callback to an Observable","options":["ab9d","7b71"]},"82a0":{"id":"82a0","label":"I have no Observables yet, and","options":["97d1","cca5"]},"initial":{"id":"initial","options":["80b7","da45","82a0"]}}