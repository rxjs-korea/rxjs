{"version":3,"mappings":"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","names":["e","origin","Math","random","toString","substring","t","forceEmbedLayout","push","clickToLoad","openFile","view","theme","hideExplorer","hideNavigation","hideDevTools","devToolsHeight","round","length","join","n","parentNode","Error","id","hasOwnProperty","height","width","setAttribute","d","replaceChild","document","getElementById","HTMLElement","newWindow","c","this","pending","port","onmessage","data","payload","__reqid","i","__success","o","keys","constructor","Object","resolve","reject","error","type","prototype","request","Promise","postMessage","p","rdc","preview","defineProperty","value","previewOrigin","writable","editor","path","applyFsDiff","getFsSnapshot","getDependencies","s","u","element","action","vm","ports","r","contentWindow","window","clearInterval","removeEventListener","addEventListener","a","setInterval","forEach","splice","h","createElement","name","indexOf","template","console","warn","method","appendChild","f","title","description","tags","dependencies","JSON","stringify","settings","files","y","connect","Element","find","l","openGithubProject","open","openProject","m","target","body","submit","removeChild","g","openProjectId","embedGithubProject","src","embedProject","outerHTML","v","contentDocument","write","embedProjectId","StackblitzService","config","codeExtension","ts","typescript","language","StackBlitzkSDK","html","code","compile","trigger","clearConsole","factory","i0","ctx_r3","ctx_r5","CodeComponent","snackbar","pretty","copier","logger","stackblitz","EventEmitter","_code","trim","formatDisplayedCode","showMissingCodeMessage","header","_header","ariaLabelCopy","ariaLabelEdit","ngOnChanges","leftAlignedCode","text","indent","Number","MAX_VALUE","lines","split","line","lineIndent","search","min","map","substr","leftAlign","setCodeHtml","codeText","getCodeText","formatCode","_a","getLinenums","pipe","tap","codeFormatted","emit","subscribe","err","region","formattedCode","codeContainer","nativeElement","innerHTML","textContent","getHtmlFromCode","pattern","RegExp","matches","match","doCopy","copyText","log","duration","editInStackBlitz","rxjs","version","linenums","parseInt","isNaN","selectors","CodeModule","PrettyPrinter","CopierService","imports","CommonModule","MatSnackBarModule","prettyPrintOne","fromPromise","getPrettyPrintOne","share","ppo","then","msg","message","first","createFake","isRTL","documentElement","getAttribute","fakeElem","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","select","setSelectionRange","removeFake","execCommand","module","scrollBehaviorSupported","supportsScrollBehavior","_viewportRuler","_previousHTMLStyles","left","_isEnabled","_document","attach","enable","_canBeEnabled","root","_previousScrollPosition","getViewportScrollPosition","coerceCssPixelValue","classList","add","disable","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","scroll","contains","viewport","getViewportSize","scrollHeight","scrollWidth","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","hasAttached","run","detach","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","abs","updatePosition","unsubscribe","scrollContainers","some","containerBounds","bottom","right","scrollContainerRect","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","isElementScrolledOutsideView","ScrollStrategyOptions","noop","NoopScrollStrategy","close","CloseScrollStrategy","block","BlockScrollStrategy","reposition","RepositionScrollStrategy","ɵfac","i1","DOCUMENT","ɵprov","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","key","undefined","connectionPair","scrollableViewProperties","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","Subscription","_backdropClickHandler","event","next","_keydownEvents","_outsidePointerEvents","_scrollStrategy","_positionStrategy","positionStrategy","backdropElement","hostElement","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","_disposeBackdrop","complete","backdropClick","attachments","detachments","keydownEvents","outsidePointerEvents","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","assign","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","coerceArray","filter","subscription","takeUntil","merge","children","backdrop","OverlayContainer","_platform","ngOnDestroy","_containerElement","getContainerElement","_createContainer","containerClass","isBrowser","_isTestEnvironment","oppositePlatformContainers","querySelectorAll","container","i1$1","boundingBoxClass","cssUnitPattern","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","positions","_validatePositions","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","originRect","viewportRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","withViewportMargin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","originX","startX","_isRtl","endX","originY","overlayStartX","overlayStartY","overlayX","overlayY","point","rawOverlayRect","overlay","getRoundedBoundingClientRect","offsetX","_getOffset","offsetY","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","observers","_getScrollVisibility","changeEvent","ConnectedOverlayPositionChange","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","previousHeight","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","virtualKeyboardOffset","clientHeight","horizontalStyleProperty","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isElementClippedByScrolling","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","cssClass","ElementRef","destination","source","input","units","parseFloat","clientRect","floor","wrapperClass","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","_","parent","OverlayPositionBuilder","global","GlobalPositionStrategy","flexibleConnectedTo","FlexibleConnectedPositionStrategy","BaseOverlayDispatcher","_attachedOverlays","index","OverlayKeyboardDispatcher","super","_keydownListener","overlays","_isAttached","OverlayOutsideClickDispatcher","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_getEventTarget","_clickListener","slice","IOS","_cursorOriginalValue","cursor","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","create","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","OverlayConfig","OverlayRef","_appRef","get","ApplicationRef","DomPortalOutlet","i5","i6","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","InjectionToken","deps","useFactory","OverlayModule","ɵmod","ɵinj","BidiModule","PortalModule","ScrollingModule","mediaQueriesForWebkitCompatibility","Set","mediaQueryStyleNode","MediaMatcher","_matchMedia","matchMedia","bind","noopMatchMedia","query","WEBKIT","BLINK","has","head","sheet","insertRule","createEmptyStyleRule","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","isMatched","queries","mediaQuery","_registerQuery","mql","observe","observables","splitQueries","observable","stateObservable","combineLatest","concat","skip","debounceTime","breakpointStates","response","breakpoints","output","Observable","observer","handler","startWith","set","a1","a2","MAT_SNACK_BAR_DATA","politeness","announcementMessage","horizontalPosition","verticalPosition","MAX_TIMEOUT","pow","containerInstance","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","_open","dismissedByAction","afterDismissed","afterOpened","_onEnter","SimpleSnackBar","snackBarRef","hasAction","MatSnackBarRef","ɵcmp","directives","i3","i2","matSnackBarAnimations","snackBarState","state","opacity","transition","animate","MatSnackBarContainer","BasePortalOutlet","_elementRef","_changeDetectorRef","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","_assertNotAttached","_applySnackBarClasses","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","fromState","toState","_completeExit","onEnter","enter","detectChanges","_screenReaderAnnounce","_announceTimeoutId","onMicrotaskEmpty","panelClasses","Array","isArray","inertElement","querySelector","liveElement","focusedElement","activeElement","removeAttribute","focus","MatSnackBarConfig","CdkPortalOutlet","decls","i3$1","MatButtonModule","MatCommonModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","MatSnackBar","_overlay","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","simpleSnackBarComponent","snackBarContainerComponent","handsetCssClass","_openedSnackBarRef","openFromComponent","component","_attach","openFromTemplate","_attachSnackBarContainer","injector","Injector","viewContainerRef","providers","useValue","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","TemplateRef","TemplatePortal","$implicit","_createInjector","contentRef","toggle","announce","_animateSnackBar","clear","isLeft","isRight","i2$1","i3$2"],"sources":["./node_modules/@stackblitz/sdk/bundles/sdk.m.js","./src/app/shared/stackblitz.service.ts","./src/app/custom-elements/code/code.component.ts","./src/app/custom-elements/code/code.module.ts","./src/app/custom-elements/code/pretty-printer.service.ts","./src/app/shared/copier.service.ts","./tools/stackblitz/rxjs.version.js","./node_modules/@angular/cdk/fesm2015/overlay.mjs","./node_modules/@angular/cdk/fesm2015/layout.mjs","./node_modules/@angular/material/fesm2015/snack-bar.mjs"],"sourcesContent":["function e(e){return e&&e.origin?e.origin:\"https://stackblitz.com\"}var t=\"300\";function n(){return Math.random().toString(36).substring(7)}function i(e){var t=[];return e&&(e.forceEmbedLayout&&t.push(\"embed=1\"),e.clickToLoad&&t.push(\"ctl=1\"),\"string\"==typeof e.openFile&&t.push(\"file=\"+e.openFile),\"preview\"!==e.view&&\"editor\"!==e.view||t.push(\"view=\"+e.view),\"light\"!==e.theme&&\"dark\"!==e.theme||t.push(\"theme=\"+e.theme),e.hideExplorer&&t.push(\"hideExplorer=1\"),e.hideNavigation&&t.push(\"hideNavigation=1\"),e.hideDevTools&&t.push(\"hidedevtools=1\"),\"number\"==typeof e.devToolsHeight&&e.devToolsHeight>=0&&e.devToolsHeight<=100&&t.push(\"devtoolsheight=\"+Math.round(e.devToolsHeight))),t.length?\"?\"+t.join(\"&\"):\"\"}function o(e,t,n){if(null===e.parentNode)throw new Error(\"Invalid Element\");t.id=e.id,d(t,n),e.parentNode.replaceChild(t,e)}function r(e){if(\"string\"==typeof e){var t=document.getElementById(e);if(null!==t)return t}else if(e instanceof HTMLElement)return e;throw new Error(\"Invalid Element\")}function a(e){return e&&!1===e.newWindow?\"_self\":\"_blank\"}function d(e,n){n&&(n.hasOwnProperty(\"height\")&&(e.height=\"\"+n.height),n.hasOwnProperty(\"width\")&&(e.width=\"\"+n.width)),e.height||(e.height=t),e.width||e.setAttribute(\"style\",\"width:100%;\")}var c=function(e){var t=this;this.pending={},this.port=e,this.port.onmessage=function(e){if(e.data.payload.__reqid){var n=e.data.payload.__reqid,i=e.data.payload.__success;if(t.pending[n]){if(delete e.data.payload.__reqid,delete e.data.payload.__success,i){var o=0===Object.keys(e.data.payload).length&&e.data.payload.constructor===Object?null:e.data.payload;t.pending[n].resolve(o)}else{var r=e.data.payload.error?e.data.type+\": \"+e.data.payload.error:e.data.type;t.pending[n].reject(r)}delete t.pending[n]}}}};c.prototype.request=function(e){var t=this,i=n();return new Promise(function(n,o){t.pending[i]={resolve:n,reject:o},e.payload.__reqid=i,t.port.postMessage(e)})};var p=function(e,t){var n=this;this.rdc=new c(e),this.preview={},Object.defineProperty(this.preview,\"origin\",{value:t.previewOrigin,writable:!1}),this.editor={openFile:function(e){return n.rdc.request({type:\"SDK_OPEN_FILE\",payload:{path:e}})}}};p.prototype.applyFsDiff=function(e){return this.rdc.request({type:\"SDK_APPLY_FS_DIFF\",payload:e})},p.prototype.getFsSnapshot=function(){return this.rdc.request({type:\"SDK_GET_FS_SNAPSHOT\",payload:{}})},p.prototype.getDependencies=function(){return this.rdc.request({type:\"SDK_GET_DEPS_SNAPSHOT\",payload:{}})};var s=[],u=function(e){var t=this;this.id=n(),this.element=e,this.pending=new Promise(function(e,n){var i=function(n){n.data.action&&\"SDK_INIT_SUCCESS\"===n.data.action&&n.data.id===t.id&&(t.vm=new p(n.ports[0],n.data.payload),e(t.vm),r())},o=function(){t.element.contentWindow&&t.element.contentWindow.postMessage({action:\"SDK_INIT\",id:t.id},\"*\")};function r(){window.clearInterval(d),window.removeEventListener(\"message\",i)}window.addEventListener(\"message\",i),o();var a=0,d=window.setInterval(function(){if(t.vm)r();else{if(a>=20)return r(),n(\"Timeout: Unable to establish a connection with the StackBlitz VM\"),void s.forEach(function(e,n){e.id===t.id&&s.splice(n,1)});a++,o()}},500)}),s.push(this)},l=function(e){var t=e instanceof Element?\"element\":\"id\",n=s.find(function(n){return n[t]===e});return n||null},h=[\"typescript\",\"create-react-app\",\"angular-cli\",\"javascript\",\"polymer\",\"vue\"];function f(e,t){var n=document.createElement(\"input\");return n.type=\"hidden\",n.name=e,n.value=t,n}function m(e){-1===h.indexOf(e.template)&&console.warn(\"Unsupported project template, must be one of: \"+h.join(\", \"));var t=document.createElement(\"form\");return t.method=\"POST\",t.setAttribute(\"style\",\"display:none;\"),t.appendChild(f(\"project[title]\",e.title)),t.appendChild(f(\"project[description]\",e.description)),t.appendChild(f(\"project[template]\",e.template)),e.tags&&e.tags.forEach(function(e){t.appendChild(f(\"project[tags][]\",e))}),e.dependencies&&t.appendChild(f(\"project[dependencies]\",JSON.stringify(e.dependencies))),e.settings&&t.appendChild(f(\"project[settings]\",JSON.stringify(e.settings))),Object.keys(e.files).forEach(function(n){t.appendChild(f(\"project[files][\"+n+\"]\",e.files[n]))}),t}function v(t,n){var o=m(t);return o.action=e(n)+\"/run\"+i(n),o.id=\"sb\",\"<html><head><title></title></head><body>\"+o.outerHTML+\"<script>document.getElementById('sb').submit();<\\/script></body></html>\"}function g(t,n){var o=m(t);o.action=e(n)+\"/run\"+i(n),o.target=a(n),document.body.appendChild(o),o.submit(),document.body.removeChild(o)}var y={connect:function(e){if(!e||!e.contentWindow)return Promise.reject(\"Provided element is not an iframe.\");var t=l(e);return t?t.pending:new u(e).pending},openGithubProject:function(t,n){window.open(e(n)+\"/github/\"+t+i(n),a(n))},openProject:function(e,t){g(e,t)},openProjectId:function(t,n){window.open(e(n)+\"/edit/\"+t+i(n),a(n))},embedGithubProject:function(t,n,a){var d=r(t),c=document.createElement(\"iframe\");return c.src=e(a)+\"/github/\"+n+i(a),o(d,c,a),y.connect(c)},embedProject:function(e,t,n){var i=r(e),a=v(t,n),d=document.createElement(\"iframe\");return o(i,d,n),d.contentDocument&&d.contentDocument.write(a),y.connect(d)},embedProjectId:function(t,n,a){var d=r(t),c=document.createElement(\"iframe\");return c.src=e(a)+\"/edit/\"+n+i(a),o(d,c,a),y.connect(c)}};export default y;\n","import StackBlitzkSDK from '@stackblitz/sdk';\nimport { Injectable } from '@angular/core';\nimport { Project } from '@stackblitz/sdk/typings/interfaces';\n\ninterface StackBlitzExampleConfig {\n  code: string;\n  language: string;\n  html?: string;\n  dependencies: {\n    [name: string]: string;\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StackblitzService {\n  openProject(config: StackBlitzExampleConfig) {\n    const codeExtension: 'js' | string= {\n      'ts': 'ts',\n      'typescript': 'ts'\n    }[config.language] || 'js';\n\n    const template: Project['template'] = codeExtension === 'ts'\n      ? 'typescript'\n      : 'javascript';\n\n    StackBlitzkSDK.openProject({\n      files: {\n        'index.html': config.html || '',\n        [`index.${codeExtension}`]: config.code\n      },\n      title: 'RxJS example',\n      description: 'RxJS example',\n      template,\n      tags: ['rxjs', 'demo'],\n      dependencies: config.dependencies,\n      settings: {\n        compile: {\n          trigger: 'auto',\n          action: 'refresh',\n          clearConsole: true,\n        },\n      }\n    }, {\n        devToolsHeight: 50\n    });\n  }\n}\n","import { Component, ElementRef, EventEmitter, Input, OnChanges, Output, ViewChild } from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\nimport { StackblitzService } from 'app/shared/stackblitz.service';\nimport version from '../../../../tools/stackblitz/rxjs.version';\n\n/**\n * If linenums is not set, this is the default maximum number of lines that\n * an example can display without line numbers.\n */\nconst DEFAULT_LINE_NUMS_COUNT = 10;\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n@Component({\n  selector: 'aio-code',\n  template: `\n    <pre class=\"prettyprint lang-{{ language }}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabelCopy\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <button *ngIf=\"!hideCopy\" class=\"material-icons edit-button no-print\"\n        title=\"Edit in StackBlitz\"\n        [attr.aria-label]=\"ariaLabelEdit\"\n        (click)=\"editInStackBlitz()\">\n        <span aria-hidden=\"true\">open_in_new</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n  `,\n})\nexport class CodeComponent implements OnChanges {\n  ariaLabelCopy = '';\n  ariaLabelEdit = '';\n\n  /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n  private codeText: string;\n\n  /** Code that should be formatted with current inputs and displayed in the view. */\n  set code(code: string) {\n    this._code = code;\n\n    if (!this._code || !this._code.trim()) {\n      this.showMissingCodeMessage();\n    } else {\n      this.formatDisplayedCode();\n    }\n  }\n  get code(): string {\n    return this._code;\n  }\n  _code: string;\n\n  /** Whether the copy button should be shown. */\n  @Input() hideCopy: boolean;\n\n  /** Language to render the code (e.g. javascript, dart, typescript). */\n  @Input() language: string | null;\n\n  /**\n   * Whether to display line numbers:\n   *  - If false: hide\n   *  - If true: show\n   *  - If number: show but start at that number\n   */\n  @Input() linenums: boolean | number | string;\n\n  /** Path to the source of the code. */\n  @Input() path: string;\n\n  /** Region of the source of the code being displayed. */\n  @Input() region: string;\n\n  /** Optional header to be displayed above the code. */\n  @Input()\n  set header(header: string | null) {\n    this._header = header;\n    this.ariaLabelCopy = this.header ? `Copy code snippet from ${this.header}` : '';\n    this.ariaLabelEdit = this.header ? `Edit code snippet from ${this.header} in StackBlitz` : '';\n  }\n  get header(): string | null {\n    return this._header;\n  }\n  private _header: string | null;\n\n  @Output() codeFormatted = new EventEmitter<void>();\n\n  /** The element in the template that will display the formatted code. */\n  @ViewChild('codeContainer', { static: true }) codeContainer: ElementRef;\n\n  constructor(\n    private snackbar: MatSnackBar,\n    private pretty: PrettyPrinter,\n    private copier: CopierService,\n    private logger: Logger,\n    private stackblitz: StackblitzService\n  ) {}\n\n  ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n    if (this.code) {\n      this.formatDisplayedCode();\n    }\n  }\n\n  private formatDisplayedCode() {\n    const leftAlignedCode = leftAlign(this.code);\n    this.setCodeHtml(leftAlignedCode); // start with unformatted code\n    this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n    this.pretty\n      .formatCode(leftAlignedCode, this.language ?? '', this.getLinenums(leftAlignedCode))\n      .pipe(tap(() => this.codeFormatted.emit()))\n      .subscribe(\n        (c) => this.setCodeHtml(c),\n        (err) => {\n          /* ignore failure to format */\n        }\n      );\n  }\n\n  /** Sets the message showing that the code could not be found. */\n  private showMissingCodeMessage() {\n    const src = this.path ? this.path + (this.region ? '#' + this.region : '') : '';\n    const srcMsg = src ? ` for\\n${src}` : '.';\n    this.setCodeHtml(`<p class=\"code-missing\">The code sample is missing${srcMsg}</p>`);\n  }\n\n  /** Sets the innerHTML of the code container to the provided code string. */\n  private setCodeHtml(formattedCode: string) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n    this.codeContainer.nativeElement.innerHTML = formattedCode;\n  }\n\n  /** Gets the textContent of the displayed code element. */\n  private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n    return this.codeContainer.nativeElement.textContent;\n  }\n\n  /** Extracts html placed in the `// html: ` comment in the code.  */\n  private getHtmlFromCode(code: string): string {\n    const pattern = new RegExp('// html: (.*)');\n    const matches = code.match(pattern);\n\n    return matches ? matches[1] : '';\n  }\n\n  /** Copies the code snippet to the user's clipboard. */\n  doCopy() {\n    const code = this.codeText;\n    const successfullyCopied = this.copier.copyText(code);\n\n    if (successfullyCopied) {\n      this.logger.log('Copied code to clipboard:', code);\n      this.snackbar.open('Code Copied', '', { duration: 800 });\n    } else {\n      this.logger.error(new Error(`ERROR copying code to clipboard: \"${code}\"`));\n      this.snackbar.open('Copy failed. Please try again!', '', { duration: 800 });\n    }\n  }\n\n  editInStackBlitz() {\n    this.stackblitz.openProject({\n      code: this.codeText,\n      language: this.language ?? '',\n      dependencies: {\n        rxjs: version,\n      },\n      html: this.getHtmlFromCode(this.codeText),\n    });\n  }\n\n  /** Gets the calculated value of linenums (boolean/number). */\n  getLinenums(code: string) {\n    const linenums =\n      typeof this.linenums === 'boolean'\n        ? this.linenums\n        : this.linenums === 'true'\n        ? true\n        : this.linenums === 'false'\n        ? false\n        : typeof this.linenums === 'string'\n        ? parseInt(this.linenums, 10)\n        : this.linenums;\n\n    // if no linenums, enable line numbers if more than one line\n    return linenums == null || isNaN(linenums as number) ? (code.match(/\\n/g) || []).length > DEFAULT_LINE_NUMS_COUNT : linenums;\n  }\n}\n\nfunction leftAlign(text: string): string {\n  let indent = Number.MAX_VALUE;\n\n  const lines = text.split('\\n');\n  lines.forEach((line) => {\n    const lineIndent = line.search(/\\S/);\n    if (lineIndent !== -1) {\n      indent = Math.min(lineIndent, indent);\n    }\n  });\n\n  return lines\n    .map((line) => line.substr(indent))\n    .join('\\n')\n    .trim();\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\n\n@NgModule({\n  imports: [ CommonModule, MatSnackBarModule ],\n  declarations: [ CodeComponent ],\n  exports: [ CodeComponent ],\n  providers: [ PrettyPrinter, CopierService ]\n})\nexport class CodeModule { }\n","import { Injectable } from '@angular/core';\n\nimport { from as fromPromise, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n  private prettyPrintOne: Observable<PrettyPrintOne>;\n\n  constructor(private logger: Logger) {\n    this.prettyPrintOne = fromPromise(this.getPrettyPrintOne()).pipe(share());\n  }\n\n  private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n    const ppo = (window as any).prettyPrintOne;\n    return ppo ? Promise.resolve(ppo) :\n      // `prettyPrintOne` is not on `window`, which means `prettify.js` has not been loaded yet.\n      // Import it; as a side-effect it will add `prettyPrintOne` on `window`.\n      import('assets/js/prettify.js' as any)\n        .then(\n          () => (window as any).prettyPrintOne,\n          err => {\n            const msg = `Cannot get prettify.js from server: ${err.message}`;\n            this.logger.error(new Error(msg));\n            // return a pretty print fn that always fails.\n            return () => { throw new Error(msg); };\n          });\n  }\n\n  /**\n   * Format code snippet as HTML\n   * @param {string} code - the code snippet to format; should already be HTML encoded\n   * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param {string|number} [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n  formatCode(code: string, language?: string, linenums?: number | boolean) {\n    return this.prettyPrintOne.pipe(\n      map(ppo => {\n        try {\n          return ppo(code, language, linenums);\n        } catch (err) {\n          const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n          console.error(msg, err);\n          throw new Error(msg);\n        }\n      }),\n      first(),  // complete immediately\n    );\n  }\n}\n","import { Injectable } from \"@angular/core\";\n/**\n * This class is based on the code in the following projects:\n *\n * - https://github.com/zenorocha/select\n * - https://github.com/zenorocha/clipboard.js/\n *\n * Both released under MIT license - © Zeno Rocha\n */\n\n\n@Injectable()\nexport class CopierService {\n    private fakeElem: HTMLTextAreaElement|null;\n\n    /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     */\n    createFake(text: string) {\n      const isRTL = document.documentElement.getAttribute('dir') === 'rtl';\n\n      // Create a fake element to hold the contents to copy\n      this.fakeElem = document.createElement('textarea');\n\n      // Prevent zooming on iOS\n      this.fakeElem.style.fontSize = '12pt';\n\n      // Reset box model\n      this.fakeElem.style.border = '0';\n      this.fakeElem.style.padding = '0';\n      this.fakeElem.style.margin = '0';\n\n      // Move element out of screen horizontally\n      this.fakeElem.style.position = 'absolute';\n      this.fakeElem.style[ isRTL ? 'right' : 'left' ] = '-9999px';\n\n      // Move element to the same position vertically\n      const yPosition = window.pageYOffset || document.documentElement.scrollTop;\n      this.fakeElem.style.top = yPosition + 'px';\n\n      this.fakeElem.setAttribute('readonly', '');\n      this.fakeElem.value = text;\n\n      document.body.appendChild(this.fakeElem);\n\n      this.fakeElem.select();\n      this.fakeElem.setSelectionRange(0, this.fakeElem.value.length);\n    }\n\n    removeFake() {\n      if (this.fakeElem) {\n        document.body.removeChild(this.fakeElem);\n        this.fakeElem = null;\n      }\n    }\n\n    copyText(text: string) {\n      try {\n        this.createFake(text);\n        return document.execCommand('copy');\n      } catch (err) {\n        return false;\n      } finally {\n        this.removeFake();\n      }\n    }\n}\n","// Exposes the current RxJS version number from the library's package.json\n// for usage in TypeScript files.\n// (Since said package.json is outside of this TypeScript project, it's not\n// available for a direct TypeScript import).\n\nmodule.exports = require('../../../package.json').version;\n","import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, ElementRef, ApplicationRef, InjectionToken, Directive, EventEmitter, Optional, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _isTestEnvironment, _getEventTarget } from '@angular/cdk/platform';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollStrategyOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        let attachResult = this._portalOutlet.attach(portal);\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        var _a;\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        (_a = this._host) === null || _a === void 0 ? void 0 : _a.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        let timeoutId;\n        const finishDetach = () => {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach) {\n                backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\n                this._disposeBackdrop(backdropToDetach);\n            }\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        };\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', finishDetach);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        var _a;\n        (_a = this._containerElement) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param overlay Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        let virtualKeyboardOffset = this._overlayContainer\n            .getContainerElement()\n            .getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayPositionBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }, { type: OverlayContainer }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nBaseOverlayDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document) {\n        super(document);\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener);\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform) {\n        super(document);\n        this._platform = _platform;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                overlayRef._outsidePointerEvents.next(event);\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            body.addEventListener('pointerdown', this._pointerDownListener, true);\n            body.addEventListener('click', this._clickListener, true);\n            body.addEventListener('auxclick', this._clickListener, true);\n            body.addEventListener('contextmenu', this._clickListener, true);\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlay.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Overlay });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }];\n    } });\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkOverlayOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() {\n        return this._lockPosition;\n    }\n    set lockPosition(value) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() {\n        return this._flexibleDimensions;\n    }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n    set growAfterOpen(value) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() {\n        return this._push;\n    }\n    set push(value) {\n        this._push = coerceBooleanProperty(value);\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkConnectedOverlay.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                    }] }, { type: i5.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHasBackdrop']\n            }], lockPosition: [{\n                type: Input,\n                args: ['cdkConnectedOverlayLockPosition']\n            }], flexibleDimensions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayFlexibleDimensions']\n            }], growAfterOpen: [{\n                type: Input,\n                args: ['cdkConnectedOverlayGrowAfterOpen']\n            }], push: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPush']\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayModule, declarations: [CdkConnectedOverlay, CdkOverlayOrigin], imports: [BidiModule, PortalModule, ScrollingModule], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] });\nOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n}\nFullscreenOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nFullscreenOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n","import * as i0 from '@angular/core';\nimport { NgModule, Injectable } from '@angular/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass LayoutModule {\n}\nLayoutModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LayoutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nLayoutModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LayoutModule });\nLayoutModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LayoutModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LayoutModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\nclass MediaMatcher {\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia =\n            this._platform.isBrowser && window.matchMedia\n                ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n                    // call it from a different scope.\n                    window.matchMedia.bind(window)\n                : noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT || this._platform.BLINK) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MediaMatcher, deps: [{ token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaMatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MediaMatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MediaMatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }]; } });\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            document.head.appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => { },\n        removeListener: () => { },\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Utility for checking the matching state of @media queries. */\nclass BreakpointObserver {\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**  A map of all media queries currently being listened for. */\n        this._queries = new Map();\n        /** A subject for all other observables to takeUntil based on. */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    isMatched(value) {\n        const queries = splitQueries(coerceArray(value));\n        return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    observe(value) {\n        const queries = splitQueries(coerceArray(value));\n        const observables = queries.map(query => this._registerQuery(query).observable);\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map(breakpointStates => {\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach(({ matches, query }) => {\n                response.matches = response.matches || matches;\n                response.breakpoints[query] = matches;\n            });\n            return response;\n        }));\n    }\n    /** Registers a specific query to be listened for. */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return this._queries.get(query);\n        }\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        const queryObservable = new Observable((observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            const handler = (e) => this._zone.run(() => observer.next(e));\n            mql.addListener(handler);\n            return () => {\n                mql.removeListener(handler);\n            };\n        }).pipe(startWith(mql), map(({ matches }) => ({ query, matches })), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BreakpointObserver, deps: [{ token: MediaMatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nBreakpointObserver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BreakpointObserver, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BreakpointObserver, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: MediaMatcher }, { type: i0.NgZone }]; } });\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries\n        .map(query => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n    XSmall: '(max-width: 599.98px)',\n    Small: '(min-width: 600px) and (max-width: 959.98px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.98px) and (orientation: portrait), ' +\n        '(max-width: 959.98px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n","import * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i2$1 from '@angular/cdk/a11y';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component });\nSimpleSnackBar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-simple-snackbar\" }, ngImport: i0, template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"], components: [{ type: i2.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-simple-snackbar',\n                    }, template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DATA]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        // Mark this element with an 'exit' attribute to indicate that the snackbar has\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n        // test harness.\n        this._elementRef.nativeElement.setAttribute('mat-exit', '');\n        // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n        // long enough to visually read it either, so clear the timeout for announcing.\n        clearTimeout(this._announceTimeoutId);\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    _applySnackBarClasses() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSnackBarContainer, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Component });\nMatSnackBarContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: MatSnackBarContainer, selector: \"snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mat-snack-bar-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], directives: [{ type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mat-snack-bar-container',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSnackBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSnackBarModule, declarations: [MatSnackBarContainer, SimpleSnackBar], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatSnackBarContainer, MatCommonModule] });\nMatSnackBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSnackBarModule, imports: [[OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [MatSnackBarContainer, MatCommonModule],\n                    declarations: [MatSnackBarContainer, SimpleSnackBar],\n                }]\n        }] });\n\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n        /** The component that should be rendered as the snack bar's simple component. */\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        /** The container component that attaches the provided template or component. */\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        /** The CSS class to apply for handset mode. */\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n}\nMatSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\nMatSnackBar.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: MatSnackBarConfig, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n"],"sourceRoot":"webpack:///","file":"719.c157e3d135a05a4a.js"}